package jp.co.sss.shop.controller.order;

import java.io.File;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import jp.co.sss.shop.bean.OrderBean;
import jp.co.sss.shop.bean.OrderItemBean;
import jp.co.sss.shop.entity.Category;
import jp.co.sss.shop.entity.Item;
import jp.co.sss.shop.entity.Order;
import jp.co.sss.shop.entity.OrderItem;
import jp.co.sss.shop.form.ItemForm;
import jp.co.sss.shop.form.OrderForm;
import jp.co.sss.shop.form.OrderShowForm;
import jp.co.sss.shop.repository.CategoryRepository;
import jp.co.sss.shop.repository.ItemRepository;
import jp.co.sss.shop.repository.OrderRepository;
import jp.co.sss.shop.util.BeanCopy;
import jp.co.sss.shop.util.Constant;
import jp.co.sss.shop.util.PriceCalc;

/**
 * 注文管理 一覧表示機能(運用管理者用)のコントローラクラス
 *
 * @author ハン ジンオ
 */

@Controller
public class OrderShowCustomerController {

	/**
	 * 注文情報
	 */
	@Autowired
	OrderRepository orderRepository;

	/**
	 * セッション
	 */
	@Autowired
	HttpSession session;

	/**
	 * 注文情報一覧表示処理
	 *
	 * @param model    Viewとの値受渡し
	 * @param form     表示用注文情報
	 * @param session  セッション情報
	 * @param pageable ページング情報
	 * @return "order/list/order_list_admin" 注文情報 一覧画面へ
	 */
	@RequestMapping(path = "/order/list", method = RequestMethod.GET)
	public String showOrderList(Model model, @ModelAttribute OrderShowForm form, Pageable pageable) {

		// すべての注文情報を取得
		Page<Order> orderList = orderRepository.findAllOrderByInsertDateDesc(pageable);

		// 注文情報リストを生成
		List<OrderBean> orderBeanList = new ArrayList<OrderBean>();
		for (Order order : orderList) {
			OrderBean orderBean = new OrderBean();
			orderBean.setId(order.getId());
			orderBean.setInsertDate(order.getInsertDate().toString());
			orderBean.setPayMethod(order.getPayMethod());

			// 注文時点の単価を合計するための一時変数
			int total = 0;

			// orderレコードから紐づくOrderItemのListを取り出す
			List<OrderItem> orderItemList = order.getOrderItemsList();

			for (OrderItem orderItem : orderItemList) {

				// 購入時単価 * 買った個数をもとめて、合計に加算
				total += (orderItem.getPrice() * orderItem.getQuantity());
			}
			// Orderに改めて注文時点の単価をセット
			orderBean.setTotal(total);

			orderBeanList.add(orderBean);
		}

		// 注文情報リストをViewへ渡す
		model.addAttribute("pages", orderList);
		model.addAttribute("orders", orderBeanList);
		model.addAttribute("url", "/order/list");

		return "order/list/order_list";

	}

	/**
	 * 注文情報詳細表示処理
	 *
	 * @param model   Viewとの値受渡し
	 * @param form    表示用注文情報
	 * @param session セッション情報
	 * @return "/order/detail/order_detail_admin" 注文情報 詳細画面へ
	 */
	@RequestMapping(path = "/order/detail/{id}")
	public String showOrder(@PathVariable int id, Model model, @ModelAttribute OrderShowForm form) {

		// 選択された注文情報に該当する情報を取得
		Order order = orderRepository.findById(form.getId()).orElse(null);

		// 表示する注文情報を生成
		OrderBean orderBean = new OrderBean();
		BeanUtils.copyProperties(order, orderBean);
		orderBean.setInsertDate(order.getInsertDate().toString());

		// 会員名を注文情報に設定
		orderBean.setUserName(order.getUser().getName());

		// 注文商品情報を取得
		List<OrderItemBean> orderItemBeanList = new ArrayList<OrderItemBean>();
		for (OrderItem orderItem : order.getOrderItemsList()) {
			OrderItemBean orderItemBean = new OrderItemBean();

			orderItemBean.setPrice(orderItem.getPrice());
			orderItemBean.setOrderNum(orderItem.getQuantity());

			// 購入時単価の合計値を計算
			// ※OrderItemのItemフィールドからgetPriceを利用すると、購入時ではなく現在の単価になってしまう。
			int subtotal = orderItem.getPrice() * orderItem.getQuantity();

			orderItemBean.setSubtotal(subtotal);

			orderItemBeanList.add(orderItemBean);
		}

		// 合計金額を算出
		int total = PriceCalc.orderItemPriceTotal(orderItemBeanList);

		// 注文情報をViewへ渡す
		model.addAttribute("order", orderBean);
		model.addAttribute("orderItemBeans", orderItemBeanList);
		model.addAttribute("total", total);

		return "order/detail/order_detail";
	}
	/**
	 * サーブレットコンテキスト
	 */
	@Autowired
	ServletContext			context;

	/**
	 * カテゴリ情報
	 */
	@Autowired
	CategoryRepository		categoryRepository;

	/**
	 * 商品情報
	 */
	@Autowired
	public ItemRepository	itemRepository;

	/**
	 * 商品情報登録画面の表示処理
	 *
	 * @param Model Viewとの値受渡し
	 * @return "item/regist/item_regist_input" 商品情報 登録画面へ
	 */
	@RequestMapping(path = "/address/input", method = {RequestMethod.POST,RequestMethod.GET})
	public String addressInput(Model model) {
		
		if (!model.containsAttribute("orderForm")) {
			model.addAttribute("orderForm", new OrderForm());
		}
		
		return "order/regist/order_address_input";
	}
	
	@RequestMapping(path = "/payment/input", method = RequestMethod.POST)
	public String paymentInput(Model model, OrderForm form) {
		
//		Order order = new Order();
//		order.setPostalCode(form.getAddress());
//		
//		
//		model.addAttribute("order", form);
//		
		return "order/regist/order_payment_input";
	}
	
	
	/**
	 * 商品情報登録入力画面へ戻る
	 *
	 * @return "item/regist/item_regist_input" 商品情報 登録画面へ
	 */
//	@RequestMapping(path = "/item/regist/input", method = RequestMethod.POST)
//	public String registInputBack(ItemForm form) {
//		
//		return "item/regist/item_regist_input";
//	}
//	
//
//	/**
//	 * 商品情報登録確認処理
//	 *
//	 * @param form
//	 *            商品情報
//	 * @param result
//	 *            入力値チェックの結果
//	 * @return 
//	 * 入力値エラーあり："redirect:/item/regist/input" 商品情報登録画面へ 
//	 * 入力値エラーなし："item/regist/item_regist_check" 商品情報登録確認画面へ
//	 *         
//	 */
//	@RequestMapping(path = "/item/regist/check", method = RequestMethod.POST)
//	public String registCheck(@Valid @ModelAttribute ItemForm form, BindingResult result
//			,RedirectAttributes redirectAttributes ) {
//
//		if (result.hasErrors()) {
//			// 入力値にエラーがあった場合、入力画面に戻る
//			redirectAttributes.addFlashAttribute("org.springframework.validation.BindingResult.itemForm", result);
//
//			redirectAttributes.addFlashAttribute("itemForm", form);
//
//			return "redirect:/item/regist/input";
//		}
//
//		if (form.getImageFile().getSize() > 0) {
//			// 画像ファイルが選択されている場合
//			MultipartFile file = form.getImageFile();
//
//			// アップロード対象のファイル名を取得
//			String imageName = file.getOriginalFilename();
//
//			// アップロードされたファイル名が絶対パスで取得された場合に名前を修正
//			if (imageName.lastIndexOf("\\") != -1) {
//				imageName = imageName.substring(imageName.lastIndexOf("\\") + 1);
//			}
//
//			// 現在の日時を「yyyyMMddhhmmss」形式の文字列として取得
//			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyyMMddhhmmss");
//			String date = dateFormat.format(new Date());
//
//			// ファイルのアップロード先を指定
//			imageName = date + "_" + imageName;
//			File uploadPath = new File(Constant.FILE_UPLOAD_PATH, imageName);
//			try {
//			Thread.sleep(500);
//			
//				// 指定されたファイルを一時的にアップロード
//				file.transferTo(uploadPath);
//			}
//			catch (Exception e) {
//				e.printStackTrace();
//				return "error";
//			}
//
//			// 一時的にアップロードしたファイルの名前をFormクラスにセット
//			form.setImage(imageName);
//		}
//
//		// 選択したカテゴリの名前をFormクラスにセット
//		Category category = categoryRepository.findById(Integer.parseInt(form.getCategoryId())).orElse(null);
//		form.setCategoryName(category.getName());
//
//		return "item/regist/item_regist_check";
//	}
//
//	/**
//	 * 商品情報登録完了処理
//	 *
//	 * @param form 商品情報
//	 * @return "redirect:/item/regist/complete" 商品情報 登録完了画面へ
//	 */
//	@RequestMapping(path = "/item/regist/complete", method = RequestMethod.POST)
//	public String registComplete(@ModelAttribute ItemForm form) {
//		// Formクラス内の各フィールドの値をエンティティにコピー
//		Item item = BeanCopy.copyFormToEntity(form);
//
//		// 商品情報を保存
//		itemRepository.save(item);
//
//		return "redirect:/item/regist/complete";
//	}
//	
//	/**
//	 * 商品情報登録完了画面
//	 *
//	 * @return "item/regist/item_regist_complete" 商品情報 登録完了画面へ
//	 */
//	@RequestMapping(path = "/item/regist/complete", method = RequestMethod.GET)
//	public String registCompleteRedirect() {
//		
//		return "item/regist/item_regist_complete";
//	}
	
}
